# In this properties file you can decide the shape and color of your nodes, your output properties
output.height=224
output.width=224
# Should nodes include details such as condition, expression, class name, etc.
output.detailed=false
# Fill the nodes or just color the outline of the nodes
output.fillNodes=true
# Should include expressions
output.includeExpressions=true
# Node fixed size
output.nodeWidth=2
output.nodeHeight=2
# Shape of the nodes. For available shapes: https://graphviz.org/doc/info/shapes.html
TypeDeclaration.shape=ellipse
MethodDeclaration.shape=box
AnonymousClassDeclaration.shape=house
SingleVariableDeclaration.shape=circle
AssertStatement.shape=star
Block.shape=square
BreakStatement.shape=trapezium
ContinueStatement.shape=invtriangle
DoStatement.shape=hexagon
EnhancedForStatement.shape=parallelogram
ExpressionStatement.shape=triangle
ForStatement.shape=parallelogram
IfStatement.shape=diamond
LabeledStatement.shape=pentagon
ReturnStatement.shape=cds
SwitchStatement.shape=diamond
SynchronizedStatement.shape=octagon
ThrowStatement.shape=invtrapezium
TryStatement.shape=invhouse
CatchClause.shape=septagon
TypeDeclarationStatement.shape=doubleoctagon
VariableDeclarationStatement.shape=component
WhileStatement.shape=hexagon
YieldStatement.shape=rarrow
ArrayAccess.shape=cylinder
ArrayCreation.shape=Mcircle
ArrayInitializer.shape=Mdiamond
Assignment.shape=Msquare
VariableDeclarationExpression.shape=tab
TypeMethodReference.shape=folder
TypeLiteral.shape=rpromoter
ThisExpression.shape=rarrow
SuperMethodInvocation.shape=larrow
SuperMethodReference.shape=lpromoter
SuperFieldAccess.shape=box3d
StringLiteral.shape=rect
PrefixExpression.shape=invtriangle
PostfixExpression.shape=invtrapezium
ParenthesizedExpression.shape=invhouse
NumberLiteral.shape=square
NullLiteral.shape=star
MethodRef.shape=hexagon
MethodInvocation.shape=pentagon
LambdaExpression.shape=septagon
InstanceofExpression.shape=egg
InfixExpression.shape=triangle
FieldAccess.shape=diamond
ExpressionMethodReference.shape=parallelogram
CreationReference.shape=house
ConditionalExpression.shape=cds
ClassInstanceCreation.shape=ellipse
CharacterLiteral.shape=circle
CastExpression.shape=trapezium
BooleanLiteral.shape=component
# Color of the nodes. For available X11 colors: https://graphviz.org/doc/info/colors.html
TypeDeclaration.color=green
MethodDeclaration.color=aqua
AnonymousClassDeclaration.color=darkgoldenrod1
SingleVariableDeclaration.color=darkgreen
AssertStatement.color=teal
Block.color=coral
BreakStatement.color=orange
ContinueStatement.color=sienna
DoStatement.color=yellow
EnhancedForStatement.color=red
ExpressionStatement.color=fuchsia
ForStatement.color=red
IfStatement.color=purple
LabeledStatement.color=lightpink
ReturnStatement.color=hotpink
SwitchStatement.color=purple
SynchronizedStatement.color=palegreen
ThrowStatement.color=tan
TryStatement.color=honeydew4
CatchClause.color=firebrick
TypeDeclarationStatement.color=royalblue
VariableDeclarationStatement.color=brown
WhileStatement.color=yellow
YieldStatement.color=blue
ArrayAccess.color=antiquewhite
ArrayCreation.color=aquamarine
ArrayInitializer.color=aquamarine4
Assignment.color=blueviolet
VariableDeclarationExpression.color=cornflowerblue
TypeMethodReference.color=crimson
TypeLiteral.color=gold
ThisExpression.color=gray60
SuperMethodInvocation.color=lightgoldenrod2
SuperMethodReference.color=lavender
SuperFieldAccess.color=magenta
StringLiteral.color=olive
PrefixExpression.color=springgreen
PostfixExpression.color=violetred
ParenthesizedExpression.color=webpurple
NumberLiteral.color=tomato
NullLiteral.color=violet
MethodRef.color=lightpink3
MethodInvocation.color=darkorchid2
LambdaExpression.color=darkkhaki
InstanceofExpression.color=darkcyan
InfixExpression.color=chocolate
FieldAccess.color=darkorange3
ExpressionMethodReference.color=darkslateblue
CreationReference.color=dodgerblue
ConditionalExpression.color=dimgray
ClassInstanceCreation.color=forestgreen
CharacterLiteral.color=darksalmon
CastExpression.color=darkred
BooleanLiteral.color=maroon3